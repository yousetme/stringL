function compress(text) {
    return trim(text.replace(/[ \n\v\f\r\t]+/g, " ") .replace(/<!--.*?-->/g, ''));
}

function trim(text) {
    if(String.prototype.trim && !String.prototype.trim.call("\uFEFF\xA0")) {
        return text == null ? "" : String.prototype.trim.call(text);
    } else {
        var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
        return text == null ? "" : ( text + "" ).replace(rtrim, "");
    }
}

function isEChar(c) {
    return /\s/.test(c);
}

function stringify(code) {
    return '"' + code
        // 单引号与反斜杠转义
        .replace(/("|\\)/g, '\\$1')
        // 换行符转义(windows + linux)
        .replace(/\r/g, '\\r')
        .replace(/\n/g, '\\n') + '"';
}
Set.Class('classes.compile.JS', {
    requires: ['classes.compile.Lexer'],

    constructor: function(code) {
        this.lexer = New('classes.compile.Lexer', code, '--');;
        this.code = code;
    },

    mapFn: 'map',

    command: {cond:1, str:1, echo:1, getv:1, code:1, for:0, foreach:0, if:3, elseif:3, else:3,
        html:0, block:1, head:0, body:0, phpend:0, script:1, file:1},
    replaces: ["out='';", "out+=", ";", "out"],

    compile: function() {
        var lexer = this.lexer;
        lexer.parse(this.code);
        //console.log(lexer.ast);
        //console.log(Set.obj2str(lexer.ast));return;
        return "function(data){var out='';" + this.t(lexer.ast) + "return out;}";
    },

    map: function(gl, tpl) {
        var replaces = this.replaces,
            code = this.code;
        switch (gl.fn) {
            case 'str':
                var temp = compress(code.substring(gl.start, gl.end));
                if(trim(temp)=='') {
                    tpl = '';
                } else {
                    tpl = replaces[1] + stringify(temp) + replaces[2];
                }
                break;
            case 'getv':
                tpl = replaces[1] + this.cmdBody(gl) + replaces[2];
                break;

            case 'echo':
                var temp = this.cmdBody(gl);
                if(trim(temp)=='') break;
                    tpl = replaces[1] + stringify(temp) + replaces[2];
                break;
            case 'for':
                tpl = "for(" + this.cmdBody(gl.tp.hp) + ') {' + tpl + "}";
                break;
            case 'if':
                tpl = "if(" + this.cmdBody(gl.tp.hp) + ') {' + tpl + "}";
                break;
            case 'elseif':
                tpl = "else if(" + this.cmdBody(gl.tp.hp) + ') {' + tpl + "} ";
                break;
            case 'else':
                tpl = "else{" + replaces[1] + stringify(compress(code.substring(gl.tp.start, gl.tp.end))) + replaces[2]  + tpl + "} ";
                break;
            case 'file': break;
            case 'script':
                tpl = replaces[1] + stringify("<script>") + replaces[2] + tpl + replaces[1] + stringify("</script>") + replaces[2];
                break;
            case 'body':
                tpl = replaces[1] + stringify("<body>") + replaces[2] + tpl +  replaces[1] + stringify("</body>") + replaces[2];
                break;
            case 'head':
                tpl = replaces[1] + stringify("<head>") + replaces[2] + tpl + replaces[1] +stringify("</head>") + replaces[2];
                break;
            case 'html':
                tpl = replaces[1] + stringify("<html>") + replaces[2] + tpl + replaces[1] + stringify("</html>") + replaces[2];
                break;
            case 'block':
                tpl  = replaces[1] + stringify(compress(code.substring(gl.tp.start, gl.tp.end))) + replaces[2]  + tpl;
                break;
            case 'code':
                tpl = compress(this.cmdBody(gl));
                break;
            default : break;
        }

        return tpl;
    },

    map1cmd: function(gl, tpl) {
        var code = this.code;
        switch (gl.fn) {
            case 'cmdstr':
                tpl = compress(code.substring(gl.start, gl.end)) ;//+ tpl
                break;
            case 'cond':
                break;
            case 'block':
                break;
            default : break;
        }

        return tpl;
    },

    cmdBody: function(gl) {
        var mapFn = this.mapFn;
        this.mapFn = 'map1cmd';
        var tpl = this.t(gl.tp);
        this.mapFn = mapFn;
        return tpl;
    },

    end: function(gl) {
        var end = true;
        while(gl = gl.hp) {
            if(this.command[gl.fn] == 3) {
                end = false;
            }
        }
        return end;
    },

    t: function(gl) {
        if(!gl) return '';
        return this[this.mapFn](gl, this.t(gl.tp)) + this.t(gl.hp);
    }
});
