Set.Class('classes.compile.PHP', {
    requires: ['classes.compile.Lexer'],

    constructor: function(code) {
        this.lexer = New('classes.compile.Lexer', code, '--');;
        this.code = code;
    },

    mapFn: 'mapPhpTag',

    command: {cond:1, str:1, echo:1, getv:1, code:1, for:0, foreach:0, if:3, elseif:3, else:3,
        html:0, block:1, head:0, body:0, phpend:0, script:1, file:1},

    compile: function() {
        var lexer = this.lexer;
        lexer.parse(this.code);
        //console.log(lexer.ast);
        //console.log(Set.obj2str(lexer.ast));return;
        return this.t(lexer.ast);
    },

    mapPhpTag: function(gl, tpl) {
        var code = this.code,
            end = this.end;
        switch (gl.fn) {
            case 'phpend':
                tpl = tpl + "?>" ;//+ tpl
                break;
            case 'getv':
                tpl = "<?php echo " + this.cmdBody(gl) + "; ?>";
                break;
            case 'echo':
                tpl = this.cmdBody(gl);
                break;
            case 'str':
                tpl = code.substring(gl.start, gl.end);
                break;
            case 'for':
                tpl = "<?php for(" + this.cmdBody(gl.tp.hp) + ') { ?>' + tpl + "<?php } ?>";
                break;
            case 'if':
                //if(this.cmdBody(gl) != '') ;
                tpl = "<?php if(" + this.cmdBody(gl.tp.hp) + ') { ?>' + tpl + "<?php } ";
                if(end.call(this, gl)) tpl += '?>';
                break;
            case 'elseif':
                tpl = "else if(" + this.cmdBody(gl.tp.hp) + ') { ?>' + tpl + "<?php } ";
                if(end.call(this, gl)) tpl += '?>';
                break;
            case 'else':
                tpl = "else(" + this.cmdBody(gl.tp.hp) + ') { ?>' + tpl + "<?php } ";
                if(end.call(this, gl)) tpl += '?>';
                break;
            case 'file':
                tpl += this.getFile(this.cmdBody(gl));
                break;
            case 'script':
                tpl = "<script>" + this.cmdBody(gl) + "</script>" ;
                break;
            case 'body':
                tpl = "<body>" + tpl + "</body>" ;
                break;
            case 'head':
                tpl = "<head>" + tpl + "</head>" ;
                break;
            case 'html':
                tpl = "<html>" + tpl + "</html>" ;
                break;
            case 'block':
                tpl  = code.substring(gl.tp.start, gl.tp.end)  + tpl;
                break;
            case 'code':
                tpl = "<?php" + this.cmdBody(gl) + "?>";
                break;
            default : break;
        }

        return tpl;
    },

    mapPhpCode: function(gl, tpl) {
        var replaces = this.replaces,
            code = this.code;
        switch (gl.fn) {
            /*            case 'str':
             tpl = compress(code.substring(gl.start, gl.end));
             break;*/
            case 'phpopen':
                tpl = tpl + "<?php\n" ;+ tpl
                break;
            case 'getv':
                tpl = replaces[1] + this.cmdBody(gl) + replaces[2];
                break;
            case 'echo':
                if(trim(code.substring(gl.start, gl.end))=='') tpl = '';
                else
                    tpl = replaces[1] + stringify(compress(code.substring(gl.start, gl.end))) + replaces[2];
                break;
            case 'for':
                tpl = "for(" + this.cmdBody(gl.tp.hp) + ') {' + tpl + "}";
                break;
            /*            case 'cond':
             tpl = "(" + tpl +") {";
             break;*/
            case 'if':
                tpl = "if(" + this.cmdBody(gl.tp.hp) + ') {' + tpl + "}";
                break;
            case 'elseif':
                tpl = "else if(" + this.cmdBody(gl.tp.hp) + ') {' + tpl + "} ";
                break;
            case 'else':
                tpl = "else(" + this.cmdBody(gl.tp.hp) + ') {' + tpl + "} ";
                break;
            case 'file': break;
            case 'script':
                tpl = replaces[1] + stringify("<script>") + replaces[2] + tpl + replaces[1] + stringify("</script>") + replaces[2];
                break;
            case 'body':
                tpl = replaces[1] + stringify("<body>") + replaces[2] + tpl +  replaces[1] + stringify("</body>") + replaces[2];
                break;
            case 'head':
                tpl = replaces[1] + stringify("<head>") + replaces[2] + tpl + replaces[1] +stringify("</head>") + replaces[2];
                break;
            case 'html':
                tpl = replaces[1] + stringify("<html>") + replaces[2] + tpl + replaces[1] + stringify("</html>") + replaces[2];
                break;
            case 'script':
                tpl = replaces[1] + stringify("<script>") + replaces[2] + tpl + replaces[1] + stringify("</script>") + replaces[2];
                break;
            case 'block':
                break;
            case 'code':
                tpl = compress(this.cmdBody(gl));
                break;
            default : break;
        }

        return tpl;
    },

    map1cmd: function(gl, tpl) {
        var code = this.code;
        switch (gl.fn) {
            case 'cmdstr':
                tpl = code.substring(gl.start, gl.end) ;//+ tpl
                break;
            case 'cond':
                break;
            case 'block':
                break;
            default : break;
        }

        return tpl;
    },

    cmdBody: function(gl) {
        var mapFn = this.mapFn;
        this.mapFn = 'map1cmd';
        var tpl = this.t(gl.tp);
        this.mapFn = mapFn;
        return tpl;
    },

    end: function(gl) {
        var end = true;
        while(gl = gl.hp) {
            if(this.command[gl.fn] == 3) {
                end = false;
            }
        }
        return end;
    },

    t: function(gl) {
        if(!gl) return '';
        return this[this.mapFn](gl, this.t(gl.tp)) + this.t(gl.hp);
    }
});
