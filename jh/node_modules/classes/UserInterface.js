Class('class.UserInterface', {
    requires:['class.command.Compile'],

    constructor: function() {

    },

    collors: {},
    commands: [],
    handle: function(args) {
        if(this.hasargs(args, '--no-color')) {
            this.colors.mode = 'none';
        }

        var first = args[2];
        if(args.length < 3 || first === '-h' ||  first === '--help'){
            this.help();
        } else if(first === '-v' || first === '--version') {
            this.version();
        } else if(first[0] === '-'){
            this.help();
        } else {
            this.exeCmd(args);
        }
    },
    hasargs: function(args, search) {
        var pos = args.indexOf(search);
        var ret = false;
        while(pos > -1){
            args.splice(pos, 1);
            pos = args.indexOf(search);
            ret = true;
        }
        return ret;
    },
    getCmd: function(args) {
        var cmd = New('class.command.Compile');
        if(cmd) {
            return cmd;
        } else {
            Set.Logger.error('command not exists');
        }
    },
    exeCmd: function(args) {
        var cmd = this.getCmd(args);
        cmd.execute(args);
    },
    help: function(name){
        var content = [
            '',
                '  Usage: ' + name + ' <command>',
            '',
            '  Commands:',
            ''
        ];

/*        this.commands.forEach(function(name){
            var cmd = fis.require('command', name);
            name = cmd.name || name;
            name = fis.util.pad(name, 12);
            content.push('    ' + name + (cmd.desc || ''));
        });*/

        content = content.concat([
            '',
            '  Options:',
            '',
            '    -h, --help     output usage information',
            '    -v, --version  output the version number',
            '    --no-color     disable colored output',
            ''
        ]);
        console.log(content.join('\n'));
    }
});

